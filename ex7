class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def find_min_max_dfs(root):
    def dfs(node):
        if node is None:
            return float('inf'), float('-inf')  # Return infinities for min and max
        
        # Get the min and max values from the left and right subtrees
        left_min, left_max = dfs(node.left)
        right_min, right_max = dfs(node.right)
        
        # Compute the minimum and maximum values
        current_min = min(node.value, left_min, right_min)
        current_max = max(node.value, left_max, right_max)
        
        return current_min, current_max
    
    return dfs(root)

# Example usage:
# Constructing a binary tree
A = TreeNode(10)
B = TreeNode(5)
C = TreeNode(20)
D = TreeNode(1)
E = TreeNode(8)

A.left = B
A.right = C
B.left = D
B.right = E

# Find minimum and maximum values
min_value, max_value = find_min_max_dfs(A)
print(f"Minimum value: {min_value}")  # Output: Minimum value: 1
print(f"Maximum value: {max_value}")  # Output: Maximum value: 20
